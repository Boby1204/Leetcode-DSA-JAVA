Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

class Solution {
    public int findMin(int[] arr) {
        int l = 0,r = arr.length - 1;
        int mid;
        while(l <= r){
            mid = (l + r) / 2;
            if(arr[mid] > arr[r]){ 
                //mid lies in first sub array
                l = mid + 1;
            }
            else if(arr[mid] < arr[r]){
                //remove mid + 1 to r from our consideration
                r = mid;
            }
            //not mid-1 because this mid could also be our answer
            // like: 4,5,6,7,8,1,2
            else  {
                return arr[l];
            }
        }
        return 0;
    }
}
