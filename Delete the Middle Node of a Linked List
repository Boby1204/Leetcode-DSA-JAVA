You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.

The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.

For n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.

class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if(head == null || head.next == null)
        return null;
        ListNode temp = head;
        int count = countNodes(head);
        int mid = count/2;
        while(mid-->1){
            head = head.next;
        }
        head.next = head.next.next;
        return temp;
    }
    public static int countNodes(ListNode head){
        int count = 0;
        while(head != null){
            count ++;
            head = head.next;
        }
        return count;
    }
}
