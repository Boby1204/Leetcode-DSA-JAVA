You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0,sum = 0;
        ListNode dummy = new ListNode();
        ListNode temp = dummy;
        while(l1 != null || l2 != null){
            sum=0;
            if(l1 != null){
                sum += l1.val;
                l1 = l1.next;
            }
             if(l2 != null){
                sum += l2.val;
                l2 = l2.next;
             }
            sum += carry;
            carry = sum/10;
            sum = sum%10;
            ListNode n = new ListNode(sum);
            temp.next = n;
            temp = n;
        }
        if(carry >= 1){
            ListNode n = new ListNode(carry);
            temp.next = n;
        }
        return dummy.next;
    }
}
